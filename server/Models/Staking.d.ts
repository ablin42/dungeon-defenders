/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "STAKING_FEE()": FunctionFragment;
    "allocateRewards(uint256,uint256,address,bool)": FunctionFragment;
    "characterToken()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "gemsBalance(address)": FunctionFragment;
    "gemsToken()": FunctionFragment;
    "isStaking(address)": FunctionFragment;
    "lootToken()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stake(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "STAKING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateRewards",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "characterToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gemsBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "gemsToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "isStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "lootToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "STAKING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "characterToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gemsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gemsToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lootToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Claimed(address)": EventFragment;
    "NFTStaked(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NFTUnstaked(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ClaimedEvent = TypedEvent<[string] & { owner: string }>;

export type NFTStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    defenderId: BigNumber;
    weaponId: BigNumber;
    armorId: BigNumber;
    bootsId: BigNumber;
    gemsAmount: BigNumber;
  }
>;

export type NFTUnstakedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    owner: string;
    defenderId: BigNumber;
    weaponId: BigNumber;
    armorId: BigNumber;
    bootsId: BigNumber;
    rewardedAmount: BigNumber;
    rewardedExp: BigNumber;
    wasRewardLoot: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    STAKING_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocateRewards(
      gemsAmount: BigNumberish,
      expAmount: BigNumberish,
      player: string,
      shouldRewardLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    characterToken(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gemsBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gemsToken(overrides?: CallOverrides): Promise<[string]>;

    isStaking(_staker: string, overrides?: CallOverrides): Promise<[boolean]>;

    lootToken(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _defenderId: BigNumberish,
      _weaponId: BigNumberish,
      _armorId: BigNumberish,
      _bootsId: BigNumberish,
      gemsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        tokenId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        gemsAmount: BigNumber;
        rewardedExpAmount: BigNumber;
        rewardedGemsAmount: BigNumber;
        timestamp: BigNumber;
        wasRewardLoot: boolean;
        isClaimable: boolean;
        isInitialized: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  allocateRewards(
    gemsAmount: BigNumberish,
    expAmount: BigNumberish,
    player: string,
    shouldRewardLoot: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  characterToken(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gemsBalance(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  gemsToken(overrides?: CallOverrides): Promise<string>;

  isStaking(_staker: string, overrides?: CallOverrides): Promise<boolean>;

  lootToken(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _defenderId: BigNumberish,
    _weaponId: BigNumberish,
    _armorId: BigNumberish,
    _bootsId: BigNumberish,
    gemsAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      tokenId: BigNumber;
      weaponId: BigNumber;
      armorId: BigNumber;
      bootsId: BigNumber;
      gemsAmount: BigNumber;
      rewardedExpAmount: BigNumber;
      rewardedGemsAmount: BigNumber;
      timestamp: BigNumber;
      wasRewardLoot: boolean;
      isClaimable: boolean;
      isInitialized: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    allocateRewards(
      gemsAmount: BigNumberish,
      expAmount: BigNumberish,
      player: string,
      shouldRewardLoot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    characterToken(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    gemsBalance(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    gemsToken(overrides?: CallOverrides): Promise<string>;

    isStaking(_staker: string, overrides?: CallOverrides): Promise<boolean>;

    lootToken(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stake(
      _defenderId: BigNumberish,
      _weaponId: BigNumberish,
      _armorId: BigNumberish,
      _bootsId: BigNumberish,
      gemsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        tokenId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        gemsAmount: BigNumber;
        rewardedExpAmount: BigNumber;
        rewardedGemsAmount: BigNumber;
        timestamp: BigNumber;
        wasRewardLoot: boolean;
        isClaimable: boolean;
        isInitialized: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(address)"(
      owner?: null
    ): TypedEventFilter<[string], { owner: string }>;

    Claimed(owner?: null): TypedEventFilter<[string], { owner: string }>;

    "NFTStaked(address,uint256,uint256,uint256,uint256,uint256)"(
      owner?: null,
      defenderId?: null,
      weaponId?: null,
      armorId?: null,
      bootsId?: null,
      gemsAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        defenderId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        gemsAmount: BigNumber;
      }
    >;

    NFTStaked(
      owner?: null,
      defenderId?: null,
      weaponId?: null,
      armorId?: null,
      bootsId?: null,
      gemsAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        defenderId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        gemsAmount: BigNumber;
      }
    >;

    "NFTUnstaked(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      owner?: null,
      defenderId?: null,
      weaponId?: null,
      armorId?: null,
      bootsId?: null,
      rewardedAmount?: null,
      rewardedExp?: null,
      wasRewardLoot?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        owner: string;
        defenderId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        rewardedAmount: BigNumber;
        rewardedExp: BigNumber;
        wasRewardLoot: boolean;
      }
    >;

    NFTUnstaked(
      owner?: null,
      defenderId?: null,
      weaponId?: null,
      armorId?: null,
      bootsId?: null,
      rewardedAmount?: null,
      rewardedExp?: null,
      wasRewardLoot?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        owner: string;
        defenderId: BigNumber;
        weaponId: BigNumber;
        armorId: BigNumber;
        bootsId: BigNumber;
        rewardedAmount: BigNumber;
        rewardedExp: BigNumber;
        wasRewardLoot: boolean;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    allocateRewards(
      gemsAmount: BigNumberish,
      expAmount: BigNumberish,
      player: string,
      shouldRewardLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    characterToken(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gemsBalance(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    gemsToken(overrides?: CallOverrides): Promise<BigNumber>;

    isStaking(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    lootToken(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _defenderId: BigNumberish,
      _weaponId: BigNumberish,
      _armorId: BigNumberish,
      _bootsId: BigNumberish,
      gemsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STAKING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocateRewards(
      gemsAmount: BigNumberish,
      expAmount: BigNumberish,
      player: string,
      shouldRewardLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    characterToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gemsBalance(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gemsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStaking(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lootToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _defenderId: BigNumberish,
      _weaponId: BigNumberish,
      _armorId: BigNumberish,
      _bootsId: BigNumberish,
      gemsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
